#! /bin/bash

. /usr/lib/network/globals
. "$SUBR_DIR/wpa"

NACLI_VERSION=0.2

usage() {
    cat << END
Usage: nacli {COMMAND} [PROFILE]
             [--help|--version]

Commands:
  list                 List available profiles (active='*', disabled='!')
  current              List currently active profiles
  switch-to [PROFILE]  Switch to a profile, enable it if necessary
  enable [PROFILE]     Enable a single profile for automatic connection
  disable [PROFILE]    Disable a single profile for automatic connection
  enable-all           Enable all profiles for automatic connection
  disable-all          Disable all profiles for automatic connection
END
}

# Gets a list of interfaces for which netctl-auto is active
netctl_auto_interfaces() {
    systemctl --full --type=service list-units | \
        grep -o "^netctl-auto@[[:alnum:]:._-]\+.service" | \
        cut -d'@' -f2 | cut -d'.' -f1
}

# Removes quotes in string $1 returned from wpa_cli status
wpa_unquote() {
    local str="$1"
    if [[ ${str:0:1} == '"' ]]; then
        printf "%s\n" "${str:1:-1}"
    else
        while [[ -n "$str" ]]; do
            printf "\x"${str:0:2}
            str=${str:2}
        done
        printf "\n"
    fi
}

# List of profiles. Output format: $interface $id $flag $profile
wpa_list_profiles() {
    local interface
    for interface in $(netctl_auto_interfaces); do
        local id ssid bssid flags
        while IFS=$'\t' read -r id ssid bssid flags; do
            local flag="e"
            if [[ "$flags" =~ \[CURRENT\] ]]; then
                flag="a"
            elif [[ "$flags" =~ \[DISABLED\] ]]; then
                flag="d"
            fi

            local profile=$(wpa_call $interface get_network $id id_str)
            profile=$(wpa_unquote "$profile")

            echo $interface $id $flag "$profile"
        done < <(wpa_call $interface list_networks | tail -n+2)
    done
}

# Returns wpa_supplicant network id and interface from profile $1
wpa_get_network_id() {
    local interface id flag profile
    while read -r interface id flag profile; do
        if [[ "$1" == "$profile" ]] ; then
            echo $id $interface
            return 0
        fi
    done < <(wpa_list_profiles)

    report_error "Profile '$1' does not exist or is not available" >&2
    return 1
}

# Runs the specified action $1 with optional network id for profile $2
wpa_profile_action() {
    local action=$1 profile="$2"
    local id interfaces interface wpa_cmd

    if [ -n "$profile" ] ; then
        { read -r id interfaces; } < <(wpa_get_network_id "$profile") || exit 1
    else
        interfaces=$(netctl_auto_interfaces)
    fi

    case $action in
      enable)
        wpa_cmd=(enable_network $id);;
      disable)
        wpa_cmd=(disable_network $id);;
      enable-all)
        wpa_cmd=(enable_network all);;
      disable-all)
        wpa_cmd=(disable_network all);;
      *)
        return 1;
    esac

    for interface in $interfaces; do
        wpa_call $interface ${wpa_cmd[@]} >/dev/null
        if [[ "${wpa_cmd[0]}" == "enable_network" ]] ; then
            wpa_call $interface reassociate >/dev/null
        fi
    done
}

# Switches to profile $1, preserves list of enabled networks
switch_to() {
    local profile="$1"
    local id interface timeout enabled_networks

    # Load profile interface, WPA network id and timeout
    { read -r id interface; } < <(wpa_get_network_id "$profile") || exit 1
    timeout=$(source "$PROFILE_DIR/$profile" ; echo $TimeoutWPA)
    : ${timeout:=25}

    # List of enabled networks
    enabled_networks=( $(wpa_call $interface list_networks | tail -n+2 | \
                        cut -f 1,4 | fgrep -v '[DISABLED]' | cut -f 1) )

    reenable_networks() {
        for network in ${enabled_networks[@]}; do
            wpa_call $interface enable_network $network >/dev/null
        done

        if [[ $(wpa_get_state $interface) != "COMPLETED" ]] ; then
            if ! in_array $id ${enabled_networks[@]} ; then
                wpa_call $interface disable_network $id >/dev/null
            fi
        fi
    }

    trap "{ reenable_networks; exit 1; }" SIGINT SIGTERM

    wpa_call $interface select_network $id >/dev/null
    if ! wpa_wait_until_state $timeout $interface "COMPLETED" ; then
        report_error "WPA association/authentication failed for interface '$interface'"
    fi

    reenable_networks
}

# Lists currently active profiles
current() {
    local interface
    for interface in $(netctl_auto_interfaces); do
        local state=$(wpa_get_state $interface)
        if [[ "$state" == "COMPLETED" ]]; then
            wpa_call $interface status | grep '^id_str=' | cut -d'=' -f2-
        fi
    done
}

# Lists all available profiles
list() {
    local interface id flag profile
    while read -r interface id flag profile; do
        printf "%s %s\n" "$(echo $flag | tr 'aed' '* !')" "$profile"
    done < <(wpa_list_profiles)
}

case $# in
  1)
    case $1 in
      --version)
        report_notice "nacli version $NACLI_VERSION";;
      --help)
        usage;;
      list|current)
        "$1";;
      enable-all|disable-all)
        wpa_profile_action "$1";;
      *)
        exit_error "$(usage)";;
    esac;;
  2)
    case $1 in
      enable|disable)
        wpa_profile_action "$1" "$2";;
      switch-to)
        switch_to "$2";;
      *)
        exit_error "$(usage)";;
    esac;;
  *)
    exit_error "$(usage)";;
esac
